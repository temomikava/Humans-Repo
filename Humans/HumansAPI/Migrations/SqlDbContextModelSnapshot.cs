// <auto-generated />
using System;
using HumansAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HumansAPI.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    partial class SqlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HumansAPI.Models.Domain.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("HumansAPI.Models.Domain.Human", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Humans");
                });

            modelBuilder.Entity("HumansAPI.Models.Domain.HumanConnection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FirstHumanId")
                        .HasColumnType("int");

                    b.Property<int>("SecondHumanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirstHumanId");

                    b.HasIndex("SecondHumanId");

                    b.ToTable("HumanConnection");
                });

            modelBuilder.Entity("HumansAPI.Models.Domain.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HumanId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("HumanId");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("HumansAPI.Models.Domain.Human", b =>
                {
                    b.HasOne("HumansAPI.Models.Domain.City", "City")
                        .WithMany("Humans")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("HumansAPI.Models.Domain.HumanConnection", b =>
                {
                    b.HasOne("HumansAPI.Models.Domain.Human", "FirstHuman")
                        .WithMany("Connections")
                        .HasForeignKey("FirstHumanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HumansAPI.Models.Domain.Human", "SecondHuman")
                        .WithMany()
                        .HasForeignKey("SecondHumanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FirstHuman");

                    b.Navigation("SecondHuman");
                });

            modelBuilder.Entity("HumansAPI.Models.Domain.Phone", b =>
                {
                    b.HasOne("HumansAPI.Models.Domain.Human", "Human")
                        .WithMany("Phones")
                        .HasForeignKey("HumanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Human");
                });

            modelBuilder.Entity("HumansAPI.Models.Domain.City", b =>
                {
                    b.Navigation("Humans");
                });

            modelBuilder.Entity("HumansAPI.Models.Domain.Human", b =>
                {
                    b.Navigation("Connections");

                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
